import pymysql
import requests


#هرچی ورودی برای کلینک و منشی تعریف میکنیم رو حتما توی دیکشنری هایی که برای کلس کلینک و منشی اد شده، اضافه کنید.
#example : clinice_milad = Clinic(12 , "tehran" , ....)
#and :     Clinic.all_clinic[clinid_id] = clinice_milad
# و برای منشی هم به همین شکل. اگه به نظرتون اضافست یا ایراد داره بگید به من. که تغییرش بدیم. چون من لاگین های
# منشی و کلینیکو بر این حساب زدم که اطلاعاتشون توی این دیکشنری ها موجود باشه.
# روزبه



class Clinic:

    all_clinic = {}

    def __init__(self, clinic_id, address, clinic_contact_info, clinic_password, capacity, service, connection):
        self.clinic_id = clinic_id
        self.address = address
        self.clinic_contact_info = clinic_contact_info
        self.clinic_password = clinic_password
        self.capacity = capacity
        self.service = service
        self.connection = connection

    def get_info(self):
        if len(self.clinic_contact_info) != 8:
            print('The phone number is incorrect')
        else:
            return {
                'clinic_id': self.clinic_id,
                'address': self.address,
                'clinic_contact_info': self.clinic_contact_info,
                'clinic_password': self.clinic_password,
                'capacity': self.capacity,
                'service': self.service
            }

    def insert_data(self) :
        data = self.get_info()
        if data is not None :
            with self.connection.cursor() as cursor :
                sql = """
                INSERT INTO clinics (clinic_id , capacity , address , service , clinic_contact_info , clinic_password) 
                VALUES (%s , %s , %s , %s , %s , %s)
                """
                cursor.execute(sql , (data['capacity'] , data['address'] , data['service'] , data['clinic_contact_info'] , data['clinic_password']))
            self.connection.commit()




#clinic = Clinic(1 , 'iran' , '44649499' , 'njsdasbfhqw' , '25' , 'goosh')

class Secretary :

    all_secretary = {}

    def __init__ (self , secretary_name , clinic) :
        self.secretary_name = secretary_name
        self.clinic_password = clinic.clinic_password
        self.clinic_id = clinic.clinic_id

    def log_in_secretary(self , secretary_name , clinic_id ):
        if secretary_name not in Secretary.all_secretary : 
            print("the username/secretary name is wrong")
        elif self.clinic_password != Clinic.all_clinic[clinic_id].clinic_password : 
            print("password is wrong")
        else : 
            print("login succesfully")

    def set_appointmnet_obj(self , appoinment_obj) :
        self.appointment_obj = appoinment_obj

    def get_info(self) :
        return {
            'secretary_name': self.secretary_name ,
            'clinic_id': self.clinic_id , 
            'clinic_password': self.clinic_password
        }
    # appointment_obj here is an istanse of class appointment:
    # the Patient word refers to roozi file
    def book_appointment(self , appointment_obj):
        return appointment_obj.add_appointment(Patient.patient_name)

    def cancel_appointment(self , appointment_obj):
        return appointment_obj.remove_appointment(Patient.patient_name)
    
    
    







class Appointment:
    def __init__(self, clinic, patient_obj, connection):
        self.service = clinic.service
        self.capacity = clinic.capacity
        self.appointments = []
        self.patient_obj = patient_obj  # This should be an instance of the Patient class
        self.clinic_id = clinic.clinic_id
        self.clinic_contact_info = clinic.clinic_contact_info
        self.address = clinic.address
        self.connection = connection

    def add_appointment(self, appointment):
        if self.capacity > 0:
            self.capacity -= 1
            self.appointments.append(appointment)  # write patients names into the list.

            # Send a POST request to the API
            data = {
                'code': self.clinic_id,
                'reserved': '1'
            }
            url = 'http://127.0.0.1:5000/reserve'
            response = requests.post(url, data=data)

            # Check the status of the request
            if response.status_code == 200:
                # Convert the response to JSON
                result = response.json()

                # Print the received information
                print(result)
                return 'Appointment added successfully!'
            else:
                print('The request encountered an error')
                return 'Failed to add appointment due to an error with the API.'
        else:
            return 'No capacity left!'
        
    
    def insert_previous_appointments_data(self) :
        with self.connection.cursor() as cursor :
            sql = """
            INSERT INTO previous_appointments (clinic_id , patient_natinal_code , patient_name , reserved_appointments , service , clinic_contact_info , address) 
            VALUES (%s , %s , %s , %s , %s , %s , %s)
            """
            cursor.execute(sql , (self.clinic_id , self.patient_obj.patient_natinal_code , self.patient_obj.patient_name , self.reserved_appointment , self.service , self.clinic_contact_info , self.address))
        self.connection.commit()
  

    def insert_new_appointments_data(self) :
        data = self.get_info()
        if data is not None :
            with self.connection.cursor() as cursor :
                sql = """
                INSERT INTO previous_appointments (clinic_id , capacity , address , clinic_contact_info , service) 
                VALUES (%s , %s , %s , %s , %s , %s , %s)
                """
                cursor.execute(sql , (self.clinic_id , self.capacity , self.address , self.clinic_contact_info , self.service))
            self.connection.commit()



connection = pymysql.connect(host = 'localhost' ,
                             user = 'root' ,
                             password = 'APterm3r@r@8304' ,
                             database = 'APclinics')

url = 'http://127.0.0.1:5000/slots'
response = requests.get(url)

if response.status_code == 200:
    data = response.json()
    for clinic_id , capacity in data.items():
        clinic = Clinic(clinic_id , 'address' , 'contact_info' , 'password' , capacity , 'service' , connection)
        print(clinic.get_info())
else:
    print('Request failed') 

connection.close()