import pymysql

class Clinic :
    def __init__ (self , clinic_id , address , clinic_contact_info , clinic_password , capacity , service , connection) :
        self.clinic_id = clinic_id
        self.address = address
        self.clinic_contact_info = clinic_contact_info
        self.clinic_password = clinic_password
        self.capacity = capacity
        self.service = service
        self.connection = connection


    def get_info (self) :
        if len(self.clinic_contact_info) != 8 :
            print('The phone number is incorrect')
        elif len(self.clinic_password) < 8 or not any (c.isdigit for c in self.clinic_password) :
            print('The password is weak.')
        else :
            return {
                'clinic_id': self.clinic_id ,
                'address': self.address ,
                'clinic_contact_info': self.clinic_contact_info ,
                'clinic_password': self.clinic_password ,
                'capacity': self.capacity ,
                'service': self.service
            }
    
    
    def insert_data(self) :
        data = self.get_info()
        if data is not None :
            with self.connection.cursor() as cursor :
                sql = """
                INSERT INTO clinics (clinic_id , capacity , address , service , clinic_contact_info , clinic_password) 
                VALUES (%s , %s , %s , %s , %s , %s)
                """
                cursor.execute(sql , (data['capacity'] , data['address'] , data['service'] , data['clinic_contact_info'] , data['clinic_password']))
            self.connection.commit()




class Secretary :
    def __init__ (self , secretary_name , clinic_id , clinic_password , appointment):
        self.secretary_name = secretary_name
        self.clinic_password = clinic_password
        self.clinic_id = clinic_id
        self.appointment = appointment


    def get_info(self) :
        return {
            'secretary_name': self.secretary_name ,
            'clinic_name': self.clinic_name , 
            'clinic_password': self.clinic_password
        }
    # appointment_obj here is an istanse of class appointment:
    # the Patient word refers to roozi file
    def book_appointment(self , appointment_obj):
        return appointment_obj.add_appointment(Patient.name)

    def cancel_appointment(self , appointment_obj):
        return appointment_obj.remove_appointment(Patient.name)
    
    
    





class Appointment :
    def __init__(self , Clinic , patient_obj , connection) :
        self.service = Clinic.service
        self.capacity = Clinic.capacity
        self.reserved_appointment = 0
        self.appointments = []
        self.patient_obj = patient_obj  # This should be an instance of the Patient class
        self.clinic_id = Clinic.clinic_id
        self.clinic_contact_info = Clinic.clinic_contact_info
        self.address = Clinic.address
        self.connection = connection

#از آنجایی که ما فقط ظرفیت برایمان مهم هست و اطلاعات خاصی زا نمی‌خواهیم وارد قسمت نوبت دهی‌مان بکنیم اینجا دیگه لیستی تعریف نمی‌کنیم.
    def add_appointment(self , appointment) :
        if self.capacity > 0 :
            self.capacity -= 1
            self.reserved_appointment += 1
            self.appointments.append(appointment) #write patients names into the list.
            return 'Appointment added successfully!'
        else:
            return 'No capacity left!'

    def remove_appointment(self , appointment) :
        if appointment in self.add_appointment :
            self.capacity += 1
            self.reserved_appointment -= 1
            self.appointments.remove(appointment) #remove the name of patient from the list.
            return 'Appointment removed successfully!'
        else:
            return 'Appointment not found!'
        
    
    def insert_previous_appointments_data(self) :
        with self.connection.cursor() as cursor :
            sql = """
            INSERT INTO previous_appointments (clinic_id , patient_natinal_code , patient_name , reserved_appointments , service , clinic_contact_info , address) 
            VALUES (%s , %s , %s , %s , %s , %s , %s)
            """
            cursor.execute(sql , (self.clinic_id , self.patient_obj.patient_natinal_code , self.patient_obj.patient_name , self.reserved_appointment , self.service , self.clinic_contact_info , self.address))
        self.connection.commit()
  

    def insert_new_appointments_data(self) :
        data = self.get_info()
        if data is not None :
            with self.connection.cursor() as cursor :
                sql = """
                INSERT INTO previous_appointments (clinic_id , capacity , address , clinic_contact_info , service) 
                VALUES (%s , %s , %s , %s , %s , %s , %s)
                """
                cursor.execute(sql , (self.clinic_id , self.capacity , self.address , self.clinic_contact_info , self.service))
            self.connection.commit()



connection = pymysql.connect(host = 'localhost' ,
                             user = 'root' ,
                             password = 'APterm3r@r@8304' ,
                             database = 'APclinics')